package com.hp.temip.alb_gui.CustomFilter;

import com.hp.temip.alb_gui.domain.UserGridObject;
import com.hp.temip.alb_gui.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.crypto.codec.Base64;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

/**
 * Copyright Hewlett Packard Sales (M) Sdn Bhd
 * User: Thaniswaran Raja Goval
 * Email: thaniswaran.raja-goval@hp.com
 * Date: 10/9/13
 * Time: 7:14 PM
 * Project: $(PROJECT_NAME)
 * Package: com.hp.temip.alb_gui.CustomFilter
 */
@Component
public class CustomAuthenticationProvider implements AuthenticationProvider {
    private UserService userService;

    @Autowired
    public void setService(UserService service) {
        this.userService = service;
    }

    private String temipToken;

    public void setTemipToken(String temipToken){
        this.temipToken = temipToken;
    }

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        String name = authentication.getName();
        String password = authentication.getCredentials().toString();
        try {
            UserGridObject userGridObject = userService.getUser(name);

            if(null!=userGridObject && null!=password && decodeBase64(password).equals(temipToken)){
                List<GrantedAuthority> grantedAuths = new ArrayList<GrantedAuthority>();
                grantedAuths.add(new SimpleGrantedAuthority("ROLE_USER"));
                Authentication auth = new UsernamePasswordAuthenticationToken(name, password, grantedAuths);
                return auth;
            } else {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }

    public static String decodeBase64(String str) {
        byte[] decodedBytes = Base64.decode(str.getBytes());

        return new String(decodedBytes);
    }
}