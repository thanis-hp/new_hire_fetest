var timeRangeStore = Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data : [
        {"abbr":"5", "name":"5 mins ago"},
        {"abbr":"10", "name":"10 mins ago"},
        {"abbr":"15", "name":"15 mins ago"}
    ]
});

var activeUdpBwFormPanel = {
    xtype:'form',
    height:100,
    id:'actv-udp-form',
    url:'insertActiveUdpJob.htm',
    layout:'form',
    frame:true,
    bodyPadding:10,
    defaults:{
        anchor:'100%',
        labelWidth:150
    },
    items       : [
        {
            xtype       : 'combobox',
            name        : 'timeRangeCmbBx',
            id          : 'timeRangeCmbBx',
            fieldLabel  : 'Choose Time Range',
            store       :  timeRangeStore,
            queryMode   : 'local',
            displayField: 'name',
            valueField  : 'abbr'
        } ,
        {
            xtype       : 'hidden',
            id          : 'subscIdTxt',
            anchor      : '100%',
            name        : 'subscIdTxt'
        }
    ],
    buttons: [{
        text: 'Reset',
        handler: function() {
            this.up('form').getForm().reset();
        }
    }, {
        id:'insertActiveUdpJobBtn',
        text: 'Submit',
        formBind: true,
        disabled: true,
        handler: insertActiveUdpJobBtn
    }],
    listeners: {
        afterRender: function(thisForm, options){
            this.keyNav = Ext.create('Ext.util.KeyNav', this.el, {
                enter: insertActiveUdpJobBtn,
                scope: this
            });
        }
    }
};

var actvUdpMdelWin = Ext.widget('window', {
    title:'Active UDP Test - Filter',
    id:'actvUdpMdel-win',
    closeAction:'hide',
    width:400,
    layout:'fit',
    modal:true,
    items:[activeUdpBwFormPanel]
});

var actvUdpPgbar = Ext.create('Ext.ProgressBar', {
    id    : 'actvUdpPgbar',
    width : 300,
    height:10
});
actvUdpPgbar.wait({
    interval: 500,
    increment: 15,
    text: 'loading...',
    scope: this
});


var activUdpPBWin  = Ext.widget('window', {
    id : 'activUdpPBWin',
    title: 'Please wait ...  ',
    closeAction: 'hide',
    width: 400,
    layout: 'fit',
    resizable: true,
    modal: false,
    items  : [actvUdpPgbar]
});

function insertActiveUdpJobBtn() {
    var form = Ext.getCmp('actv-udp-form').getForm();
    if (form.isValid()) {
        Ext.getCmp('subscIdTxt').setValue(Ext.getCmp('servicesCombo').getValue());
        form.submit({
            success:function (form, action) {
                actvUdpMdelWin.close();
                Ext.getCmp('activUdpPBWin').show();
                getActiveUdpResponse(Ext.decode(action.response.responseText).data.jobId);
            },
            failure:function (form, action) {
                Ext.Msg.alert('Job Failed', 'Caught internal error. Please check the logs for details.' );
            }
        });
    }
}

function getActiveUdpResponse(jobsId){
    Ext.require([ '*' ]);
    Ext.Ajax.request({
        url : 'getActiveUdpResponse.htm',
        method : 'POST',
        params : {"jobId":jobsId},
        success : function(response) {
            var status = Ext.decode(response.responseText).success;
            if (status){
                var result = Ext.decode(response.responseText).data.status;
                if (result == 'PENDING')
                    getActiveUdpResponse(jobsId);
                else  if (result == 'SUCCESS'){
                    Ext.getCmp('activUdpPBWin').close();
                    actvUdpRespMdelWin.show();
                    udpGridTab.store.loadData(Ext.decode(response.responseText).data.resList, false);
                    //udpGridTab.store.sort('name', 'ASC');
                }
            }else if (!status){
                modelCallIdsWin.close();
                var jsonRespObj = Ext.decode(response.responseText).data;
                Ext.getCmp('activPingPBWin').close();
                Ext.Msg.alert('Job Failed', jsonRespObj.errCode + "<br>" + jsonRespObj.errMsg );
            }
        },
        failure : function(response) {
            Ext.Msg.alert('Job Failed', 'Caught internal error. Please check the logs for details.' );
        }
    });
}

Ext.define('udpGridModel', {
    extend: 'Ext.data.Model',
    fields: [
        {name: 'timeStamp',    type: 'string'},
        {name: 'testInstanceId',    type: 'string'},
        {name: 'verifierId',    type: 'string'},
        {name: 'result',    type: 'string'},
        {name: 'hostAddrResponder',    type: 'string'},
        {name: 'l2BytesRcvdResponder',    type: 'string'},
        {name: 'l2BytesSentResponder',    type: 'string'},
        {name: 'uDPBandRcvdResponder',    type: 'string'},
        {name: 'l2BandRcvdResponder',    type: 'string'},
        {name: 'uDPBandSentResponder',    type: 'string'},
        {name: 'l2BandSentResponder',    type: 'string'},
        {name: 'percentBandRcvdResponder',    type: 'string'},
        {name: 'percentBandSentResponder',    type: 'string'},
        {name: 'lostPacketsToResponder',    type: 'string'},
        {name: 'percentLostPacketsToResponder',    type: 'string'},
        {name: 'numLossPeriodsToResponder',    type: 'string'},
        {name: 'minLossSizeToResponder',    type: 'string'},
        {name: 'maxLossSizeToResponder',    type: 'string'},
        {name: 'avgLossSizeToResponder',    type: 'string'},
        {name: 'outOfOrderToResponder',    type: 'string'},
        {name: 'l2BytesRcvdController',    type: 'string'},
        {name: 'l2BytesSentController',    type: 'string'},
        {name: 'uDPBandRcvdController',    type: 'string'},
        {name: 'l2BandRcvdController',    type: 'string'},
        {name: 'uDPBandSentController',    type: 'string'},
        {name: 'l2BandSentController',    type: 'string'},
        {name: 'percentBandRcvdController',    type: 'string'},
        {name: 'percentBandSentController',    type: 'string'},
        {name: 'lostPacketsToController',    type: 'string'},
        {name: 'percentLostPacketsToController',    type: 'string'},
        {name: 'numLossPeriodsToController',    type: 'string'},
        {name: 'minLossSizeToController',    type: 'string'},
        {name: 'maxLossSizeToController',    type: 'string'},
        {name: 'avgLossSizeToController',    type: 'string'}
    ]
});

var udpGridStore = Ext.create('Ext.data.Store', {
    id: 'udpGrid-store',
    autoLoad: false,
    model: 'udpGridModel',
    proxy: {
        type: 'memory',
        reader: {
            type: 'json',
            root: 'resList'
        }
    }
});

var udpGridTab = Ext.create('Ext.grid.Panel', {
    id:'udpGrid-panel',
    iconCls:'icon-grid',
    store: udpGridStore,
    columns: [
        {text: "timeStamp", flex:1, sortable: true, dataIndex: 'timeStamp'},
        {text: "testInstanceId", flex:1, sortable: true, dataIndex: 'testInstanceId'},
        {text: "verifierId", flex:1, sortable: true, dataIndex: 'verifierId'},
        {text: "result", flex:1, sortable: true, dataIndex: 'result'},
        {text: "hostAddrResponder", flex:1, sortable: true, dataIndex: 'hostAddrResponder'},
        {text: "l2BytesRcvdResponder", flex:1, sortable: true, dataIndex: 'l2BytesRcvdResponder'},
        {text: "l2BytesSentResponder", flex:1, sortable: true, dataIndex: 'l2BytesSentResponder'},
        {text: "uDPBandRcvdResponder", flex:1, sortable: true, dataIndex: 'uDPBandRcvdResponder'},
        {text: "l2BandRcvdResponder", flex:1, sortable: true, dataIndex: 'l2BandRcvdResponder'},
        {text: "uDPBandSentResponder", flex:1, sortable: true, dataIndex: 'uDPBandSentResponder'},
        {text: "l2BandSentResponder", flex:1, sortable: true, dataIndex: 'l2BandSentResponder'},
        {text: "percentBandRcvdResponder", flex:1, sortable: true, dataIndex: 'percentBandRcvdResponder'},
        {text: "percentBandSentResponder", flex:1, sortable: true, dataIndex: 'percentBandSentResponder'},
        {text: "lostPacketsToResponder", flex:1, sortable: true, dataIndex: 'lostPacketsToResponder'},
        {text: "percentLostPacketsToResponder", flex:1, sortable: true, dataIndex: 'percentLostPacketsToResponder'},
        {text: "numLossPeriodsToResponder", flex:1, sortable: true, dataIndex: 'numLossPeriodsToResponder'},
        {text: "minLossSizeToResponder", flex:1, sortable: true, dataIndex: 'minLossSizeToResponder'},
        {text: "maxLossSizeToResponder", flex:1, sortable: true, dataIndex: 'maxLossSizeToResponder'},
        {text: "avgLossSizeToResponder", flex:1, sortable: true, dataIndex: 'avgLossSizeToResponder'},
        {text: "outOfOrderToResponder", flex:1, sortable: true, dataIndex: 'outOfOrderToResponder'},
        {text: "l2BytesRcvdController", flex:1, sortable: true, dataIndex: 'l2BytesRcvdController'},
        {text: "l2BytesSentController", flex:1, sortable: true, dataIndex: 'l2BytesSentController'},
        {text: "uDPBandRcvdController", flex:1, sortable: true, dataIndex: 'uDPBandRcvdController'},
        {text: "l2BandRcvdController", flex:1, sortable: true, dataIndex: 'l2BandRcvdController'},
        {text: "uDPBandSentController", flex:1, sortable: true, dataIndex: 'uDPBandSentController'},
        {text: "l2BandSentController", flex:1, sortable: true, dataIndex: 'l2BandSentController'},
        {text: "percentBandRcvdController", flex:1, sortable: true, dataIndex: 'percentBandRcvdController'},
        {text: "percentBandSentController", flex:1, sortable: true, dataIndex: 'percentBandSentController'},
        {text: "lostPacketsToController", flex:1, sortable: true, dataIndex: 'lostPacketsToController'},
        {text: "percentLostPacketsToController", flex:1, sortable: true, dataIndex: 'percentLostPacketsToController'},
        {text: "numLossPeriodsToController", flex:1, sortable: true, dataIndex: 'numLossPeriodsToController'},
        {text: "minLossSizeToController", flex:1, sortable: true, dataIndex: 'minLossSizeToController'},
        {text: "maxLossSizeToController", flex:1, sortable: true, dataIndex: 'maxLossSizeToController'},
        {text: "avgLossSizeToController", flex:1, sortable: true, dataIndex: 'avgLossSizeToController'}
    ],
    columnLines:true,
    collapsible:false,
    title:'UDP BW Active Results',
    autoScroll:true
});

var actvUdpRespMdelWin = Ext.widget('window', {
    title:'Active UDP BW Test - Response',
    id:'actvUdpRespMdel-win',
    closeAction:'hide',
    width:900,
    layout:'fit',
    modal:true,
    items:[udpGridTab]
});

