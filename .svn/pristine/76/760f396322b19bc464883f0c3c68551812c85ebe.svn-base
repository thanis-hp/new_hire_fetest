<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">


    <bean id="authenticationFilter" class="com.hp.temip.alb_gui.CustomFilter.AuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>

    <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/authenticate.htm" />
    </bean>

    <!-- This is where we configure Spring-Security  -->
    <!--<security:http auto-config="true" use-expressions="true" access-denied-page="/auth/denied" >-->
    <security:http auto-config='false' entry-point-ref="authenticationEntryPoint">

        <security:intercept-url pattern="/authenticate.htm" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <!--<security:intercept-url pattern="/logout.htm" access="IS_AUTHENTICATED_ANONYMOUSLY"/>-->
        <security:intercept-url pattern="/launchAdmin.htm" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/**.htm" access="ROLE_USER,ROLE_ADMIN"/>
        <security:intercept-url pattern="/scripts/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/images/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/css/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>

        <security:logout
                invalidate-session="true"
                logout-success-url="/authenticate.htm"
                logout-url="/logout.htm"/>

        <security:session-management session-fixation-protection="newSession" >
            <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" session-registry-ref="sessionRegistry"/>
        </security:session-management>
        <security:custom-filter position="FORM_LOGIN_FILTER" ref="authenticationFilter" />
    </security:http>

    <!-- Declare an authentication-manager to use a custom userDetailsService -->
    <security:authentication-manager alias="authenticationManager">
        <!--<security:authentication-provider user-service-ref="userService">-->
        <security:authentication-provider ref="customAuthenticationProvider"/>
        <security:authentication-provider >
            <security:password-encoder ref="passwordEncoder"/>
            <security:jdbc-user-service data-source-ref="dataSource"
                users-by-username-query="select username,password,
                                        enabled from USERS where username=? and (enabled = 1 or enabled = -1)"
                authorities-by-username-query="select u.username, ur.authority from
                                        USERS u, USER_ROLES ur where u.user_id = ur.user_id
                                        and u.username =?"
                    />
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

    <bean class="com.hp.temip.alb_gui.CustomFilter.CustomAuthenticationProvider" id="customAuthenticationProvider">
        <property name="temipToken" value="TeMIPSSO"/>
    </bean>

    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

</beans>