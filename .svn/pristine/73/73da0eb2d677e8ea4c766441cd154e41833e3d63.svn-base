package com.hp.temip.alb_gui.controller;

import com.hp.temip.alb_gui.domain.AlarmGridObject;
import com.hp.temip.alb_gui.domain.AlbHostGridObject;
import com.hp.temip.alb_gui.service.SampleAlarmService;
import com.hp.temip.alb_gui.service.UserAccessAuditService;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.io.*;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Controller
public class SampleAlarmManagementController {

    private Log logger = LogFactory.getLog(getClass());
    private SampleAlarmService service;
    private UserAccessAuditService userAccessAuditService;

    private static final String SUCCESS_STATUS = "Success";
    private static final String ERROR_STATUS = "Error";

    @Autowired
    public void setService(SampleAlarmService service) {
        this.service = service;
    }

    @Autowired
    public void setUserAccessAuditService(UserAccessAuditService service) {
        this.userAccessAuditService = service;
    }

    @RequestMapping(value = "/getAlarmList.htm", method = RequestMethod.GET)
    @ResponseBody
    public HashMap getAlarmList() {
        List<AlarmGridObject> alarmGridObjects = service.getAlarmList();

        HashMap<String, List<AlarmGridObject>> modelMap = new HashMap<String, List<AlarmGridObject>>();
        modelMap.put("alarms", alarmGridObjects);
        logger.debug(alarmGridObjects);
        return modelMap;
    }

    @RequestMapping(value = "insertNewAlarm.htm", method = RequestMethod.POST, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> insertNewUsers(@RequestParam String alarmName, @RequestParam String alarmText,
                                                 @RequestParam String alarmRemark) {
        String result;
        try {

            logger.debug("SampleAlarm post object: alarmName: " + alarmName + " | alarmText: " + alarmText + " | alarmRemark: " + alarmRemark);

            if (null == alarmName || null == alarmText || null == alarmRemark) {
                result = "{success:false}";
                return new ResponseEntity<String>(result, HttpStatus.OK);
            }

            AlarmGridObject alarmGridObject = new AlarmGridObject();
            alarmGridObject.setAlarmName(alarmName);
            alarmGridObject.setAlarmText(alarmText);
            alarmGridObject.setAlarmRemark(alarmRemark);

            logger.debug("Inserting SampleAlarm: " + alarmGridObject.toString());
            service.insertNewAlarm(alarmGridObject);
            result = "{success:true}";
        } catch (Exception e) {
            String errorReason = "Failed to add sample alarm. Please contact Administrator.";
            try {
                throw e.getCause();
            } catch (SQLException sql) {
                if (sql.getErrorCode() == -104 && sql.getSQLState().equals("23000"))
                    errorReason = "Failed to add sample alarm, duplicate alarm name.";
            } catch (Throwable throwable) {
                throwable.printStackTrace();
            }
            result = "{success:false, errors:{reason:'" + errorReason + "'}}";
        }

        userAccessAuditService.insertAudit("SAMPLE_ALARM:NEW");
        return new ResponseEntity<String>(result, HttpStatus.OK);


    }

    @RequestMapping(value = "updateAlarm.htm", method = RequestMethod.POST, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> updateAlarm(@RequestParam String alarmName, @RequestParam String alarmText,
                                              @RequestParam String alarmRemark) {
        String result;
        try {

            logger.debug("SampleAlarm post object: alarmName: " + alarmName + " | alarmText: " + alarmText + " | alarmRemark: " + alarmRemark);

            if (null == alarmName || null == alarmText || null == alarmRemark) {
                result = "{success:false}";
                return new ResponseEntity<String>(result, HttpStatus.OK);
            }

            AlarmGridObject alarmGridObject = new AlarmGridObject();
            alarmGridObject.setAlarmName(alarmName);
            alarmGridObject.setAlarmText(alarmText);
            alarmGridObject.setAlarmRemark(alarmRemark);

            logger.debug("Updating SampleAlarm: " + alarmGridObject.toString());
            service.updateAlarm(alarmGridObject);
            result = "{success:true}";
        } catch (Exception e) {
            String errorReason = "Failed to update sample alarm. Please contact Administrator.";
            try {
                throw e.getCause();
            } catch (SQLException sql) {
                if (sql.getErrorCode() == -104 && sql.getSQLState().equals("23000"))
                    errorReason = "Failed to update sample alarm, duplicate alarm name.";
            } catch (Throwable throwable) {
                throwable.printStackTrace();
            }
            result = "{success:false, errors:{reason:'" + errorReason + "'}}";
        }

        userAccessAuditService.insertAudit("SAMPLE_ALARM:UPDATE");
        return new ResponseEntity<String>(result, HttpStatus.OK);


    }

    @RequestMapping(value = "removeSampleAlarm.htm", method = RequestMethod.POST, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> removeSampleAlarm(@RequestParam String alarmName) {
        String result;
        try {

            logger.debug("SampleAlarm post object: alarmName: " + alarmName);

            if (null == alarmName) {
                result = "{success:false}";
                return new ResponseEntity<String>(result, HttpStatus.OK);
            }

            AlarmGridObject alarmGridObject = new AlarmGridObject();
            alarmGridObject.setAlarmName(alarmName);

            logger.debug("Removing SampleAlarm: " + alarmGridObject.toString());
            service.removeSampleAlarm(alarmGridObject);
            result = "{success:true}";
        } catch (Exception e) {
            String errorReason = "Failed to add sample alarm. Please contact Administrator.";
            try {
                throw e.getCause();
            } catch (SQLException sql) {
                if (sql.getErrorCode() == -104 && sql.getSQLState().equals("23000"))
                    errorReason = "Failed to add sample alarm, duplicate alarm name.";
            } catch (Throwable throwable) {
                throwable.printStackTrace();
            }
            result = "{success:false, errors:{reason:'" + errorReason + "'}}";
        }
        userAccessAuditService.insertAudit("SAMPLE_ALARM:REMOVE");
        return new ResponseEntity<String>(result, HttpStatus.OK);
    }



    /**
     *
     * @param alarmParameter
     * @param hostIp
     * @return
     */
    @RequestMapping(value = "getAlarmDump.htm", method = RequestMethod.POST, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> getAlarmDump(HttpServletRequest request, @RequestParam String alarmParameter, @RequestParam String hostIp){
        userAccessAuditService.insertAudit("SAMPLE_ALARM:DUMP");
        String result = "";
        String status = SUCCESS_STATUS; //default
        String scriptResult = "";

        //match host with localaddress (if this is locally, then no need to do scp etc
        String clientIP = request.getLocalAddr();
        boolean isLocal = true;

        //if the clientIP is
        if(!clientIP.equals(hostIp)){
            logger.debug("copying the files!");
            isLocal = false;
        }

        if(isLocal){

            String command = "manage";
            String args0 = "show";
            String suffix1 = "all";
            String suffix2 = "att";

            ProcessBuilder pb = new ProcessBuilder(command, args0, alarmParameter, suffix1, suffix2);
            pb.redirectErrorStream(true); //redirect all messages

            try {
                logger.debug("XXXD: inside try");
                Process p = pb.start();
                logger.debug("XXXD: after try");
                InputStream in = null;

                in = p.getInputStream();

                scriptResult = convertStreamToStr(in);

                System.out.println("result?: \n" + scriptResult);
                in.close();

                p.destroy();

                String escaped = StringEscapeUtils.escapeJavaScript(scriptResult);
                System.out.println("escaped result?: \n" + escaped);

                result += "{\"success\":true, \"data\":{\"result\":\"" + escaped + "\"}}";
                logger.debug("XXXD: after all's been said and done");
            } catch (Exception e) {
                logger.debug("XXXD: inside catch");
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                scriptResult += "\nError in executing script!\nDetailed Error:\n" + e.getMessage();
                result += "{\"success\":false, \"data\":{\"result\":\""+StringEscapeUtils.escapeJavaScript(scriptResult)+"\"}}";

            } finally {
                logger.debug("XXXD: inside finally");
                return new ResponseEntity<String>(result, HttpStatus.OK);
            }

        }   else{
            try {

                String selectedOperationFileName = "ssh";
                String args1 = "/usr/opt/temip/bin/manage show";// OPERATION_CONTEXT .nokia_netact_fs1_oc alarm_object 17803273";
                String args2 = "all att";


                String concatenatedArgument = args1 +" "+alarmParameter+" "+args2;
                logger.info("argument is: "+concatenatedArgument);
//            ssh 10.1.100.153 '/usr/opt/temip/bin/manage show OPERATION_CONTEXT .nokia_netact_fs1_oc alarm_object 17803273'
                ProcessBuilder installPb = new ProcessBuilder(selectedOperationFileName, hostIp, concatenatedArgument);
                installPb.redirectErrorStream(true); //send error stream to inputstream as well!
                //set working directory!
//            logger.info("working directory is: "+installPb.directory().toString());

                Process p = installPb.start();
                InputStream in = null;

                in = p.getInputStream();

                //append the result!
                scriptResult += convertStreamToStr(in);

                int exitValue = p.waitFor();
                logger.debug("resultx2?: \n" + scriptResult);
                in.close();
                p.destroy();

                String escaped = StringEscapeUtils.escapeJavaScript(scriptResult);
                logger.debug("escaped result?: \n" + escaped);
                logger.debug("exitValue: "+exitValue);


                result += "{\"success\":true, \"data\":{\"result\":\"" + escaped + "\"}}";

            } catch (IOException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                scriptResult += "\nError in executing script!\nDetailed Error:\n" + e.getMessage();
                result += "{\"success\":false, \"data\":{\"result\":\""+StringEscapeUtils.escapeJavaScript(scriptResult)+"\"}}";
                status = ERROR_STATUS;
            } finally {

                return new ResponseEntity<String>(result, HttpStatus.OK);
            }

        }

    }


    /**
     *
     * @param is
     * @return
     * @throws java.io.IOException
     */
    public static String convertStreamToStr(InputStream is) throws IOException {

        if (is != null) {
            Writer writer = new StringWriter();

            char[] buffer = new char[1024];
            try {
                Reader reader = new BufferedReader(new InputStreamReader(is,
                        "UTF-8"));
                int n;
                while ((n = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, n);
                }
            } finally {
                is.close();
            }
            return writer.toString();
        }
        else {
            return "";
        }
    }


}
