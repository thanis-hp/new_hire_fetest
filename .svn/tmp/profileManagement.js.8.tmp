//Ext.require(['*']);
Ext.Loader.setConfig({enabled: true});
Ext.Loader.setPath('Ext.ux', 'scripts/ext.js/4.1.1/ux');
Ext.require([
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.ux.grid.FiltersFeature'
]);


function getProfileManagementMain() {
//GRID STARTS HERE
    Ext.QuickTips.init();

// setup the state provider, all state information will be saved to a cookie
    Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));

// sample static data for the store
//var profileGridData = [
//    ['Profile1','9/1 12:00am', '9/1 12:00am', 'Pending',  'Pending'],
//    ['Profile2','9/1 12:00am', '9/1 12:00am', 'Pending',  'Pending']
//];

    var profileGridStore = new Ext.data.JsonStore({
        storeId: 'profileGrid-store',
        autoLoad: true,
        proxy: {
            type: 'ajax',
            url: 'getProfileList.htm',
            reader: {
                type: 'json',
                root: 'profiles'
            }
        },

        fields: ['profileId', 'dateCreated', 'dateModified', 'translateStatus', 'deployStatus', 'albVersion', 'albUser']
    });


//
//// create the data store
//var profileGridStore = Ext.create('Ext.data.ArrayStore', {
//    fields: [
//        {name: 'profileName'},
//        {name: 'dateCreated',      type: 'date', dateFormat: 'n/j h:ia'},
//        {name: 'dateModified',     type: 'date', dateFormat: 'n/j h:ia'},
//        {name: 'translateStatus'},
//        {name: 'deployStatus'}
//    ],
//    data: profileGridData
//});


    var filters = {
        ftype: 'filters',
        encode: false,
        local: true
    };

    // create the Grid
    var profileGrid = Ext.create('Ext.grid.Panel', {
        id: 'profileManagement-panel',
        frame: true,
        store: profileGridStore,
        stateful: true,
        stateId: 'profileGrid-state',
        sealedColumns: true,
        enableColumnMove: false,
        enableColumnResize: false,
        features: [filters],
        columns: [
            {
                text: 'Profile Name',
                //width    : 85,
                flex: 1,
                sortable: false,
                dataIndex: 'profileId',
                filter: {
                    type: 'string'
                }
            },
            {
                text: 'ALB Version',
                width: 85,
                sortable: false,
                dataIndex: 'albVersion',
                filter: {
                    type: 'numeric'
                }
            },
            {
                text: 'ALB User',
                //width    : 85,
                flex: 1,
                sortable: false,
                dataIndex: 'albUser',
                filter: {
                    type: 'string'
                }
            },
            {
                text: 'Date Created',
                width: 85,
                sortable: true,
                renderer: Ext.util.Format.dateRenderer('m/d/Y'),
                dataIndex: 'dateCreated'
            },
            {
                text: 'Deploy File Status',
                width: 120,
                sortable: true,
                dataIndex: 'translateStatus'
            },
            {
                text: 'Script Install Status',
                width: 120,
                sortable: true,
                dataIndex: 'deployStatus'
            },
            {
                xtype: 'actioncolumn',
                text: 'Actions',
                width: 150,
                sortable: false,
                menuDisabled: true,
                align: 'center',
                items: [
                    {
                        icon: 'images/save.png',  // Use a URL in the icon config
                        tooltip: 'Deploy Files',
                        handler: function (grid, rowIndex, colIndex) {
                            var rec = profileGridStore.getAt(rowIndex);

                            Ext.MessageBox.show({
                                title: 'Deploy ' + rec.get('profileId'),
                                msg: 'Are you sure? This action will overwrite Profile: ' + rec.get('profileId') + ' files.',
                                buttons: Ext.MessageBox.OKCANCEL,
                                fn: function (btn) {
                                    if (btn == 'ok') {
//                                executeScript('install',rec.get('profileId'), rec.get('albVersion'));
                                        Ext.Ajax.request({
                                            url: 'createFiles.htm',
                                            method: 'POST',
                                            params: {"profileId": rec.get('profileId'), "albVersion": rec.get('albVersion')},
                                            success: function (response) {
                                                if (response.responseText == '-1') {
                                                    Ext.Msg.alert('Failed', 'Failed to deploy. Please contact administrator.');
                                                } else {
                                                    Ext.Msg.alert('Success', 'Successfully deployed files to TeMIP server.');
                                                }

                                            },
                                            failure: function (response) {
                                                Ext.Msg.alert('Failed', 'Failed to deploy. Please contact administrator.');
                                            }
                                        });
                                    }
                                },
                                animateTarget: 'profileManagement-panel',
                                icon: Ext.MessageBox.QUESTION
                            });
                        }
                    },
                    {
                        icon: 'images/application_go.png',  // Use a URL in the icon config
                        tooltip: 'Execute Install script',
                        handler: function (grid, rowIndex, colIndex) {
                            var rec = profileGridStore.getAt(rowIndex);

                            Ext.MessageBox.show({
                                title: 'Execute Install script for ' + rec.get('profileId'),
                                msg: 'Are you sure? This action will overwrite any existing profile detail in ALB TeMIP.',
                                buttons: Ext.MessageBox.OKCANCEL,
                                fn: function (btn) {
                                    if (btn == 'ok') {
                                        executeScript('install', rec.get('profileId'), rec.get('albVersion'));
                                    }
                                },
                                animateTarget: 'profileManagement-panel',
                                icon: Ext.MessageBox.QUESTION
                            });
                        }
                    },
                    {
                        icon: 'images/remove.png',  // Use a URL in the icon config
                        tooltip: 'Remove',
                        handler: function (grid, rowIndex, colIndex) {
                            var rec = profileGridStore.getAt(rowIndex);

                            Ext.MessageBox.show({
                                title: 'Remove ' + rec.get('profileId') + ' Version: ' + rec.get('albVersion'),
                                msg: 'Are you sure you want to remove the selected profile?',
                                buttons: Ext.MessageBox.OKCANCEL,
                                fn: function (btn) {
                                    if (btn == 'ok') {
                                        removeProfile(rec.get('profileId'), rec.get('albVersion'));
                                    }
                                },
                                animateTarget: 'profileManagement-panel',
                                icon: Ext.MessageBox.QUESTION
                            });
                        }
                    }
                ]
            }
        ],
        height: 500,
        width: 700,
        title: 'ALB Profile Management',
        viewConfig: {
            stripeRows: true
        },
        tbar: [
            {
                xtype: 'button',
                text: 'Refresh',
                iconCls: 'icon-refresh',
                handler: function () {
                    profileGridStore.reload();
                }
            },
            {
                xtype: 'button',
                iconCls: 'icon-add',
                text: 'Add Profile',
                handler: function () {
                    Ext.Msg.prompt('Profile Name', 'Please enter profile name:', function (btn, text, cfg) {
                        if (btn == 'ok' && Ext.isEmpty(text)) {
                            var newMsg = '<span style="color:red">Please enter profile name:</span>';
                            Ext.Msg.show(Ext.apply({}, { msg: newMsg }, cfg));
                        } else if (btn == 'ok') {
                            selectedProfile = text;
                            createNewProfile();
                        } else {
                            //do nothing
                        }
                    });
                }
            },
            {
                xtype: 'button',
                iconCls: 'icon-remove',
                text: 'Remove Profile',
                handler: function () {
                    if (profileGrid.getSelectionModel().hasSelection()) {
                        Ext.Msg.show({
                            title: 'Confirm Action',
                            msg: 'Are you sure you want to remove the selected profile?',
                            width: 300,
                            buttons: Ext.Msg.YESNO,
                            fn: function (btn) {
                                if (btn == 'yes') {
                                    var row = profileGrid.getSelectionModel().getSelection()[0];
                                    Ext.getBody().mask('Removing profile from system...');
                                    removeProfile(row.get('profileId'), row.get('albVersion'));
                                }
                            },
                            animateTarget: this,
                            icon: Ext.Msg.QUESTION
                        });
                    } else {
                        Ext.Msg.alert("Message", "Please select a sample alarm to remove.");
                    }
                }
            }
        ],
        listeners: {
            itemdblclick: function (view, rec, node, index, e) {
                selectedProfile = rec.get('profileId');
                selectedVersion = rec.get('albVersion');
                //console.log(rec.get('profileId'));
                Ext.getCmp('content-panel').layout.setActiveItem('profileGrids-panel');

            },
            activate: function (grid, eOpts) {
                profileGridStore.reload();
            }

        }
    });

    function executeScript(mode, profileId, albVersion) {
        Ext.Ajax.request({
            url: 'executeScript.htm',
            method: 'POST',
            params: {"mode": mode, "profileId": selectedProfile, "albVersion": selectedVersion},
            success: function (response) {
                if (response.responseText == '-1') {
                    Ext.Msg.alert('Failed', 'Failed to execute Install script. Please contact Administrator.');
                } else {
                    //console.log(response.responseText);
                    var jsonData = Ext.JSON.decode(response.responseText);
                    var log = jsonData.data.result;
                    Ext.Msg.alert('Successfully executed', 'Successfully executed the script. Result as follows: ' + log);
                }

            },
            failure: function (response) {
                Ext.Msg.alert('Failed', 'Failed to create new profile.');
            }
        });
    }

    function createNewProfile() {
        Ext.Ajax.request({
            url: 'insertNewProfile.htm',
            method: 'POST',
            params: {"profileId": selectedProfile},
            success: function (response) {
                if (response.responseText == '-1') {
                    Ext.Msg.alert('Failed', 'Failed');
                } else {
                    Ext.getCmp('content-panel').layout.setActiveItem('profileGrids-panel');
                }

            },
            failure: function (response) {
                Ext.Msg.alert('Failed', 'Failed to create new profile.');
            }
        });
    }

    function removeProfile(profileId, albVersion) {
        Ext.Ajax.request({
            url: 'removeProfile.htm',
            method: 'POST',
            params: {"profileId": profileId, "albVersion": albVersion},
            success: function (response) {
                if (response.responseText == '-1') {
                    Ext.Msg.alert('Failed', 'Failed to remove profile. Please contact Administrator.');
                } else {
                    Ext.Msg.alert('Success', 'Profile removed from system.');
                }
                profileGridStore.reload();
            },
            failure: function (response) {
                Ext.Msg.alert('Failed', 'Failed to remove profile. Please contact Administrator.');
            },
            callback: function () {
                Ext.getBody().unmask();
                profileGridStore.reload();
            }
        });
    }

    return profileGrid;
}


function getProfileGrids() {


    //SELECTION CONTROL GRID
    Ext.QuickTips.init();

// setup the state provider, all state information will be saved to a cookie
    Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));


    Ext.define('SelectionControlModel', {
        extend: 'Ext.data.Model',
        fields: [
            {name: 'accessModule'},
            {name: 'globalClass'},
            {name: 'domains'},
            {name: 'nodeName'},
            {name: 'subclass'},
            {name: 'originalAlarmRemain'},
            {name: 'profileId'},
            {name: 'managedObjectDiscriminator'},
            {name: 'dateCreated'}
        ]
    });

    var selectionControlGridStore = new Ext.data.JsonStore({
        storeId: 'profileGrids-selection-store',
        autoLoad: false,
        model: 'SelectionControlModel',
        proxy: {
            type: 'ajax',
            url: 'getSelectionControl.htm',
            reader: {
                type: 'json',
                root: 'selctrl'
            },
            params: {profileId: '', albVersion: ''}
        },


        fields: ['accessModule', 'globalClass', 'domains', 'nodeName', 'subclass', 'originalAlarmRemain', 'profileId',
            'managedObjectDiscriminator', 'dateCreated']
    });


    var selectionControlCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
        clicksToEdit: 1
    });

    // create the Grid
    var selectionControlGrid = Ext.create('Ext.grid.Panel', {
        id: 'profileGrids-selection-panel',
        frame: true,
        store: selectionControlGridStore,
        stateful: true,
        stateId: 'profileGrids-selection-state',
        sealedColumns: true,
        enableColumnMove: false,
        enableColumnResize: true,
        columns: [
            {
                header: 'Access Module',
                width: 90,
                sortable: true,
                dataIndex: 'accessModule',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Global Class',
                width: 90,
                sortable: true,
                dataIndex: 'globalClass',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Domains',
                width: 90,
                sortable: true,
                dataIndex: 'domains',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Node Name',
                width: 90,
                sortable: true,
                dataIndex: 'nodeName',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Subclass',
                width: 90,
                sortable: true,
                dataIndex: 'subclass',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Original Alarm Remain?',
                width: 90,
                sortable: true,
                dataIndex: 'originalAlarmRemain',
                field: {
                    xtype: 'combobox',
                    typeAhead: true,
                    triggerAction: 'all',
                    selectOnTab: true,
                    store: [
                        ['Yes', 'Yes'],
                        ['No', 'No']
                    ],
                    lazyRender: true,
                    listClass: 'x-combo-list-small'
                }
            },
            {
                header: 'Profile Name',
                flex: 1,
                sortable: false,
                dataIndex: 'profileId',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Managed Object Discriminator',
                width: 90,
                sortable: true,
                dataIndex: 'managedObjectDiscriminator',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Date Created',
                width: 85,
                sortable: true,
                renderer: Ext.util.Format.dateRenderer('m/d/Y'),
                dataIndex: 'dateCreated',
                field: {
                    xtype: 'datefield',
                    allowBlank: false
                }

            }
        ],
        height: 200,
        width: '100%',
        title: 'Selection Control',
        viewConfig: {
            stripeRows: true
        },
        plugins: [selectionControlCellEditing],
        tbar: [
            {
                text: 'Add Row',
                handler: function () {
                    // Create a record instance through the ModelManager
                    var r = Ext.ModelManager.create({
                        accessModule: 'NewRow',
                        globalClass: '*',
                        domains: '',
                        nodeName: '',
                        subclass: '',
                        originalAlarmRemain: 'No',
                        profileId: selectedProfile,
                        managedObjectDiscriminator: '',
                        dateCreated: Ext.Date.clearTime(new Date())
                    }, 'SelectionControlModel');
                    var rowCount = selectionControlGridStore.getCount();
                    selectionControlGridStore.insert(rowCount, r);
                    selectionControlCellEditing.startEditByPosition({row: rowCount, column: 0});
                }
            }
        ]
    });

    //PARAM EXTRACT GRID STARTS HERE
    Ext.QuickTips.init();

// setup the state provider, all state information will be saved to a cookie
    Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));

//// sample static data for the store
//    var paramExtractGridData = [
////        ['Profile1','9/1 12:00am', '9/1 12:00am', 'Pending',  'Pending'],
//        ['$OOBSCName1','Additional Text','SubNetwork=ONRM_ROOT_MO_R,SubNetwork','StringBetween(\'=\',\',\')1','if ExtractChars($OOBSCName1,0,1) == "BS" then $OOBSCName1 else ""','9/1 12:00am']
//    ];
//
//// create the data store
//    var paramExtractGridStore = Ext.create('Ext.data.ArrayStore', {
//        fields: [
//            {name: 'targetAlarm'},
//            {name: 'sourceAlarm'},
//            {name: 'keyword'},
//            {name: 'extractAfter'},
//            {name: 'postProcessing'},
//            {name: 'dateCreated',      type: 'date', dateFormat: 'n/j h:ia'}
//        ],
//        data: paramExtractGridData
//    });

    Ext.define('ParamExtractModel', {
        extend: 'Ext.data.Model',
        fields: [
            {name: 'targetAlarmParameter'},
            {name: 'sourceAlarmParameter'},
            {name: 'keyword'},
            {name: 'extractAfterKeyword'},
            {name: 'postProcessing'},
            {name: 'dateCreated'}
        ]
    });

    var paramExtractGridStore = new Ext.data.JsonStore({
        storeId: 'profileGrids-paramextract-store',
        autoLoad: false,
        model: 'ParamExtractModel',
        proxy: {
            type: 'ajax',
            url: 'getParamExtract.htm',
            reader: {
                type: 'json',
                root: 'paramextract'
            },
            params: {profileId: '', albVersion: ''}
        },


        fields: ['targetAlarmParameter', 'sourceAlarmParameter', 'keyword', 'extractAfterKeyword', 'postProcessing', 'dateCreated']
    });


//
//    var paramExtractCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
//        clicksToEdit: 1
//    });
    var myCodeMirror;

    var paramExtractFormPanel = {
        xtype: 'form',
        height: 400,
        //region: 'center',
        id: 'paramextract-form',
        url: 'insertParameterExtract.htm',
        layout: 'form',
        frame: false,
        bodyPadding: 5,
        //bodyBorder: false,
        defaults: {
            anchor: '90%',
            labelWidth: 100
        },
        items: [
            {
                xtype: 'textfield',
                id: 'txtTargetAlarmParameter',
                name: 'pf-targetAlarmParameter',
                fieldLabel: 'Target Alarm Parameter',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtSourceAlarmParameter',
                name: 'pf-sourceAlarmParameter',
                fieldLabel: 'Source Alarm Parameter',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtKeyword',
                name: 'pf-keyword',
                fieldLabel: 'Keyword',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtExtractAfterKeyword',
                name: 'pf-extractAfterKeyword',
                fieldLabel: 'Extract After Keyword',
                allowBlank: false
            },
            {
                xtype: 'textarea',
                id: 'txtPostProcessing',
                name: 'pf-postProcessing',
                fieldLabel: 'Post-Processing',
                allowBlank: true
            },
            {
                xtype: 'hidden',
                id: 'rowId',
                name: 'pf-rowId',
                value: -1
            }
        ],
        buttons: [
            {
                text: 'Reset',
                handler: function () {
                    var form = Ext.getCmp('paramextract-form').getForm();

                    form.findField('txtTargetAlarmParameter').setDisabled(false);
                    resetCodeMirror();

                    form.reset();

                }
            },
            {
                text: 'Submit',
                formBind: true,
                disabled: true,
                handler: submitParameterExtract
            }
        ],
        listeners: {
            afterRender: function (thisForm, options) {
                this.keyNav = Ext.create('Ext.util.KeyNav', this.el, {
                    scope: this
                });
            }
        }
    };


    var paramExtractWindow = Ext.widget('window', {
        title: 'Parameter Extract Form',
        id: 'paramextract-window',
        closeAction: 'hide',
        width: 650,
        height: 450,
        layout: 'fit',
        modal: true,
        animateTarget: 'profileGrids-paramextract-panel',
        items: [paramExtractFormPanel],
        listeners: {
            hide: function (form, action) {
                resetCodeMirror();
                Ext.getCmp('paramextract-form').getForm().reset();

            },
            afterrender: function (form, action) {

                CodeMirror.commands.autocomplete = function (myCodeMirror) {
                    CodeMirror.showHint(myCodeMirror, CodeMirror.hint.temip, {
                        alignWithWord: false,
                        closeOnUnfocus: false
                    });
                };

                var textAreaTest = Ext.getCmp('txtPostProcessing');
                myCodeMirror = CodeMirror.fromTextArea(textAreaTest.inputEl.dom, {
                    lineNumbers: true,
                    extraKeys: {"Ctrl-Space": "autocomplete"}
                });


            }
        }
    });

    function resetCodeMirror() {
        myCodeMirror.setValue('');
        myCodeMirror.clearHistory();
    }


    function submitParameterExtract() {


        var form = Ext.getCmp('paramextract-form').getForm();
        if (form.isValid()) {
            myCodeMirror.save(); //save the contents of the editor

            form.submit({
                params: {
                    profileId: selectedProfile,
                    albVersion: selectedVersion
                },
                waitTitle: 'Please wait.',
                waitMsg: 'Saving Parameter Extraction Details',
                success: function (form, action) {
                    Ext.getCmp('paramextract-window').hide();

//                    //reload store?
//                    paramExtractGridStore.load({
//                        params:{
//                            profileId: selectedProfile,
//                            albVersion: selectedVersion
//                        }
//                    });

//                    var parameterExtractRecords = paramExtractGridStore.getRange();
//
//                    if (parameterExtractRecords.length > 0) {
//                        var parameterExtractDataArray = new Array();
//
//                        for (var i in parameterExtractRecords) {
//                            parameterExtractDataArray.push(parameterExtractRecords[i].data);
//                        }
//
//                        var parameterExtractPostValue = JSON.stringify(parameterExtractDataArray);
//                        parameterExtractPostValue = "{\"paramextract\":" + parameterExtractPostValue + "}";
//
//                        console.log(parameterExtractPostValue);
//
//                    }


                    var rowId = form.findField('rowId').getValue();
                    console.log('rowId is: ' + rowId);

                    if (rowId == -1) {
                        var s = Ext.ModelManager.create({
                            targetAlarmParameter: form.findField('txtTargetAlarmParameter').getValue(),
                            sourceAlarmParameter: form.findField('txtSourceAlarmParameter').getValue(),
                            keyword: form.findField('txtKeyword').getValue(),
                            extractAfterKeyword: form.findField('txtExtractAfterKeyword').getValue(),
                            postProcessing: form.findField('txtPostProcessing').getValue(),
                            dateCreated: Ext.Date.clearTime(new Date())
                        }, 'ParamExtractModel');


                        var rowCount2 = paramExtractGridStore.getCount();
                        console.log(rowCount2);

                        paramExtractGridStore.insert(rowCount2, s);
                    } else {
                        var rec = paramExtractGridStore.getAt(rowId);

                        rec.set('targetAlarmParameter', form.findField('txtTargetAlarmParameter').getValue());
                        rec.set('sourceAlarmParameter', form.findField('txtSourceAlarmParameter').getValue());
                        rec.set('keyword', form.findField('txtKeyword').getValue());
                        rec.set('extractAfterKeyword', form.findField('txtExtractAfterKeyword').getValue());
                        rec.set('postProcessing', form.findField('txtPostProcessing').getValue());
                    }


                },
                failure: function (form, action) {
                    Ext.Msg.alert('Failed', 'Error saving to DB! ');

                    paramExtractGridStore.load({
                        params: {
                            profileId: selectedProfile,
                            albVersion: selectedVersion
                        }
                    });
                }
            });
        }
    }


    function checkDuplicateParameter(targetAlarmParameter, albVersion) {
        //check targetAlarmParameter and (albVersion but only if rowId is not -1)

        var form = Ext.getCmp('paramextract-form').getForm();
        var targetAlarmParameter = form.findField('txtTargetAlarmParameter').getValue();
        var rowId = form.findField('rowId').getValue();

        if (rowId != -1) {

        }

    }


    // create the Grid
    var paramExtractGrid = Ext.create('Ext.grid.Panel', {
        id: 'profileGrids-paramextract-panel',
        frame: false,
        store: paramExtractGridStore,
        stateful: true,
        stateId: 'profileGrids-paramextract-state',
        sealedColumns: true,
        enableColumnMove: false,
        enableColumnResize: true,
        columns: [
            {
                header: 'Target Alarm Parameter',
                width: 90,
                sortable: true,
                dataIndex: 'targetAlarmParameter',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Source Alarm Parameter',
                width: 125,
                sortable: true,
                dataIndex: 'sourceAlarmParameter',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Keyword',
                width: 90,
                sortable: true,
                dataIndex: 'keyword',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Extract After Keyword',
                width: 200,
                sortable: true,
                dataIndex: 'extractAfterKeyword',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Post-processing',
                width: 250,
                sortable: true,
                dataIndex: 'postProcessing',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Date Created',
                width: 85,
                sortable: true,
                renderer: Ext.util.Format.dateRenderer('m/d/Y'),
                dataIndex: 'dateCreated',
                field: {
                    xtype: 'datefield',
                    allowBlank: false
                }
            }
        ],
        height: 350,
        width: '100%',
        title: 'Parameter Extraction',
        viewConfig: {
            stripeRows: true
        },
//        plugins:[paramExtractCellEditing],
        tbar: [
            {
                text: 'Add Row',
                handler: function () {
                    // Create a record instance through the ModelManager
//                var s = Ext.ModelManager.create({
//                    targetAlarmParameter: 'TEst',
//                    sourceAlarmParameter: 'a',
//                    keyword:    'a',
//                    extractAfterKeyword: 'a',
//                    postProcessing: 'a',
//                    dateCreated: Ext.Date.clearTime(new Date())
//                }, 'ParamExtractModel');
//                var rowCount2 = paramExtractGridStore.getCount();
//                console.log(rowCount2);
//                paramExtractGridStore.insert(rowCount2, s);
//                paramExtractCellEditing.startEditByPosition({row: rowCount2, column: 0});
                    var form = Ext.getCmp('paramextract-form').getForm();
                    form.findField('txtTargetAlarmParameter').setDisabled(false);
                    paramExtractWindow.show();

                }
            }
        ],
        listeners: {
            itemdblclick: function (view, rec, node, index, e) {
                paramExtractWindow.show();
                var form = Ext.getCmp('paramextract-form').getForm();
                form.findField('txtTargetAlarmParameter').setValue(rec.get('targetAlarmParameter'));
                form.findField('txtTargetAlarmParameter').setDisabled(true);
                form.findField('txtSourceAlarmParameter').setValue(rec.get('sourceAlarmParameter'));
                form.findField('txtKeyword').setValue(rec.get('keyword'));
                form.findField('txtExtractAfterKeyword').setValue(rec.get('extractAfterKeyword'));
                form.findField('txtPostProcessing').setValue(rec.get('postProcessing'));
                resetCodeMirror();
                myCodeMirror.setValue(rec.get('postProcessing'));

                form.findField('rowId').setValue(index);
                console.log('index: ' + index);


            }
        }
    });


//GRID STARTS HERE
    Ext.QuickTips.init();

// setup the state provider, all state information will be saved to a cookie
    Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));

// sample static data for the store
    var alarmIdentifierGridData = [
//        ['Profile1','9/1 12:00am', '9/1 12:00am', 'Pending',  'Pending'],
//        ['Profile2','9/1 12:00am', '9/1 12:00am', 'Pending',  'Pending']
    ];

    /*
     PROFILE_ID	VARCHAR
     EVENT-ID	VARCHAR
     VARIABLES	VARCHAR
     SHOW ALARM	VARCHAR
     DATABASE TABLE	VARCHAR
     DATABASE ACCESS	VARCHAR
     TABLE COLUMNS	VARCHAR
     ADDITIONAL TEXT	VARCHAR
     PROBABLE CAUSE	VARCHAR
     PERCEIVED SEVERITY	VARCHAR
     ALARM TYPE	VARCHAR
     USERTEXT	VARCHAR
     LABEL1	VARCHAR
     LABEL2	VARCHAR
     LABEL 3	VARCHAR
     LABEL4	VARCHAR
     LABEL5	VARCHAR
     LABEL6	VARCHAR
     LABEL7	VARCHAR
     LABEL8	VARCHAR
     LABEL9	VARCHAR
     LABEL10	VARCHAR
     ALB_VERSION	VARCHAR
     ALB_USER	VARCHAR
     DATE_CREATED	DATETIME


     */


//// create the data store
//    var alarmIdentifierGridStore = Ext.create('Ext.data.ArrayStore', {
//        fields: [
//            {name: 'eventId'},
//            {name: 'variables'},
//            {name: 'showAlarm'},
//            {name: 'databaseTable'},
//            {name: 'databaseAccess'},
//            {name: 'tableColumns'},
//            {name: 'additionalText'},
//            {name: 'probableCause'},
//            {name: 'perceivedSeverity'},
//            {name: 'alarmType'},
//            {name: 'userText'},
//            {name: 'label1'},
//            {name: 'label2'},
//            {name: 'label3'},
//            {name: 'label4'},
//            {name: 'label5'},
//            {name: 'label6'},
//            {name: 'label7'},
//            {name: 'label8'},
//            {name: 'label9'},
//            {name: 'label10'},
//            {name: 'dateCreated',      type: 'date', dateFormat: 'n/j h:ia'}
//        ],
//        data: alarmIdentifierGridData
//    });


    Ext.define('AlarmIdentifierModel', {
        extend: 'Ext.data.Model',
        fields: [
            {name: 'eventId'},
            {name: 'variables'},
            {name: 'showAlarm'},
            {name: 'databaseTable'},
            {name: 'databaseAccess'},
            {name: 'tableColumns'},
            {name: 'additionalText'},
            {name: 'probableCause'},
            {name: 'perceivedSeverity'},
            {name: 'alarmType'},
            {name: 'userText'},
            {name: 'label1'},
            {name: 'label2'},
            {name: 'label3'},
            {name: 'label4'},
            {name: 'label5'},
            {name: 'label6'},
            {name: 'label7'},
            {name: 'label8'},
            {name: 'label9'},
            {name: 'label10'},
            {name: 'dateCreated'}
        ]
    });

    var alarmIdentifierGridStore = new Ext.data.JsonStore({
        storeId: 'profileGrids-alarm-store',
        autoLoad: false,
        model: 'AlarmIdentifierModel',
        proxy: {
            type: 'ajax',
            url: 'getAlarmIdentifiers.htm',
            reader: {
                type: 'json',
                root: 'alarm'
            },
            params: {profileId: '', albVersion: ''}
        },

        fields: [
            'eventId',
            'variables',
            'showAlarm',
            'databaseTable',
            'databaseAccess',
            'tableColumns',
            'additionalText',
            'probableCause',
            'perceivedSeverity',
            'alarmType',
            'userText',
            'label1',
            'label2',
            'label3',
            'label4',
            'label5',
            'label6',
            'label7',
            'label8',
            'label9',
            'label10',
            'dateCreated'
        ]
    });


//    var alarmIdentifierCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
//        clicksToEdit: 1
//    });


    var alarmIdentifierFormPanel = {
        xtype: 'form',
        height: 400,
        id: 'alarm-form',
        url: 'insertAlarmIdentifier.htm',
        layout: 'form',
        frame: true,
        bodyPadding: 10,
        defaults: {
            anchor: '100%',
            labelWidth: 100
        },
        items: [
            {
                xtype: 'textfield',
                id: 'txtEventId',
                name: 'ai-eventId',
                fieldLabel: 'Event ID',
                allowBlank: false
            },
            {
                xtype: 'textarea',
                id: 'txtVariables',
                name: 'ai-variables',
                fieldLabel: 'Variables',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtShowAlarm',
                name: 'ai-showAlarm',
                fieldLabel: 'Show Alarm',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtDatabaseTable',
                name: 'ai-databaseTable',
                fieldLabel: 'Database Table',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtDatabaseAccess',
                name: 'ai-databaseAccess',
                fieldLabel: 'Database Access',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtTableColumns',
                name: 'ai-tableColumns',
                fieldLabel: 'Table Columns',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtAdditionalText',
                name: 'ai-additionalText',
                fieldLabel: 'Additional Text',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtProbableCause',
                name: 'ai-probableCause',
                fieldLabel: 'Probable Cause',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtPerceivedSeverity',
                name: 'ai-perceivedSeverity',
                fieldLabel: 'Perceived Severity',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtAlarmType',
                name: 'ai-alarmType',
                fieldLabel: 'Alarm Type',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtUserText',
                name: 'ai-userText',
                fieldLabel: 'User Text',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel1',
                name: 'ai-label1',
                fieldLabel: 'Label1',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel2',
                name: 'ai-label2',
                fieldLabel: 'Label2',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel3',
                name: 'ai-label3',
                fieldLabel: 'Label3',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel4',
                name: 'ai-label4',
                fieldLabel: 'Label4',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel5',
                name: 'ai-label5',
                fieldLabel: 'Label5',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel6',
                name: 'ai-label6',
                fieldLabel: 'Label6',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel7',
                name: 'ai-label7',
                fieldLabel: 'Label7',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel8',
                name: 'ai-label8',
                fieldLabel: 'Label8',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel9',
                name: 'ai-label9',
                fieldLabel: 'Label9',
                allowBlank: false
            },
            {
                xtype: 'textfield',
                id: 'txtLabel10',
                name: 'ai-label10',
                fieldLabel: 'Label10',
                allowBlank: false
            },
            {
                xtype: 'hidden',
                id: 'rowId',
                name: 'ai-rowId',
                value: -1

            }

        ],
        buttons: [
            {
                text: 'Reset',
                handler: function () {
                    this.up('form').getForm().reset();
                }
            },
            {
                text: 'Submit',
                formBind: true,
                disabled: true,
                handler: submitAlarmIdentifier
            }
        ],
        listeners: {
            afterRender: function (thisForm, options) {
                this.keyNav = Ext.create('Ext.util.KeyNav', this.el, {
                    scope: this
                });
            }
        }
    };


    var alarmIdentifierWindow = Ext.widget('window', {
        title: 'Alarm Identifier Form',
        id: 'alarm-window',
        closeAction: 'hide',
        width: 500,
        height: 650,
        layout: 'fit',
        modal: true,
        animateTarget: 'profileGrids-alarm-panel',
        items: [alarmIdentifierFormPanel],
        listeners: {
            hide: function (form, action) {
                Ext.getCmp('alarm-form').getForm().reset();
            }

        }
    });


    function submitAlarmIdentifier() {

        var form = Ext.getCmp('alarm-form').getForm();
        if (form.isValid()) {

            form.submit({
                params: {
                    profileId: selectedProfile,
                    albVersion: selectedVersion
                },
                waitTitle: 'Please wait.',
                waitMsg: 'Saving Alarm Identifier Details',
                success: function (form, action) {
                    Ext.getCmp('alarm-window').hide();

//                    //reload store?
//                    alarmIdentifierGridStore.load({
//                        params:{
//                            profileId: selectedProfile,
//                            albVersion: selectedVersion
//                        }
//                    });

                    var rowId = form.findField('rowId').getValue();
                    console.log('rowId is: ' + rowId);

                    if (rowId == -1) {
                        var t = Ext.ModelManager.create({
                            eventId: form.findField('txtEventId').getValue(),
                            variables: form.findField('txtVariables').getValue(),
                            showAlarm: form.findField('txtShowAlarm').getValue(),
                            databaseTable: form.findField('txtDatabaseTable').getValue(),
                            databaseAccess: form.findField('txtDatabaseAccess').getValue(),
                            tableColumns: form.findField('txtTableColumns').getValue(),
                            additionalText: form.findField('txtAdditionalText').getValue(),
                            probableCause: form.findField('txtProbableCause').getValue(),
                            perceivedSeverity: form.findField('txtPerceivedSeverity').getValue(),
                            alarmType: form.findField('txtAlarmType').getValue(),
                            userText: form.findField('txtUserText').getValue(),
                            label1: form.findField('txtLabel1').getValue(),
                            label2: form.findField('txtLabel2').getValue(),
                            label3: form.findField('txtLabel3').getValue(),
                            label4: form.findField('txtLabel4').getValue(),
                            label5: form.findField('txtLabel5').getValue(),
                            label6: form.findField('txtLabel6').getValue(),
                            label7: form.findField('txtLabel7').getValue(),
                            label8: form.findField('txtLabel8').getValue(),
                            label9: form.findField('txtLabel9').getValue(),
                            label10: form.findField('txtLabel10').getValue(),
                            dateCreated: Ext.Date.clearTime(new Date())


                        }, 'AlarmIdentifierModel');
                        var rowCount3 = alarmIdentifierGridStore.getCount();
                        alarmIdentifierGridStore.insert(rowCount3, t);
                    } else {
                        var rec = alarmIdentifierGridStore.getAt(rowId);

                        rec.set('eventId', form.findField('txtEventId').getValue());
                        rec.set('variables', form.findField('txtVariables').getValue());
                        rec.set('showAlarm', form.findField('txtShowAlarm').getValue());
                        rec.set('databaseTable', form.findField('txtDatabaseTable').getValue());
                        rec.set('databaseAccess', form.findField('txtDatabaseAccess').getValue());
                        rec.set('tableColumns', form.findField('txtTableColumns').getValue());
                        rec.set('additionalText', form.findField('txtAdditionalText').getValue());
                        rec.set('probableCause', form.findField('txtProbableCause').getValue());
                        rec.set('perceivedSeverity', form.findField('txtPerceivedSeverity').getValue());
                        rec.set('alarmType', form.findField('txtAlarmType').getValue());
                        rec.set('userText', form.findField('txtUserText').getValue());
                        rec.set('label1', form.findField('txtLabel1').getValue());
                        rec.set('label2', form.findField('txtLabel2').getValue());
                        rec.set('label3', form.findField('txtLabel3').getValue());
                        rec.set('label4', form.findField('txtLabel4').getValue());
                        rec.set('label5', form.findField('txtLabel5').getValue());
                        rec.set('label6', form.findField('txtLabel6').getValue());
                        rec.set('label7', form.findField('txtLabel7').getValue());
                        rec.set('label8', form.findField('txtLabel8').getValue());
                        rec.set('label9', form.findField('txtLabel9').getValue());
                        rec.set('label10', form.findField('txtLabel10').getValue());
                    }


                },
                failure: function (form, action) {
                    Ext.Msg.alert('Failed', 'Error saving to DB! ');

                    alarmIdentifierGridStore.load({
                        params: {
                            profileId: selectedProfile,
                            albVersion: selectedVersion
                        }
                    });
                }
            });
        }
    }


    // create the Grid
    var alarmIdentifierGrid = Ext.create('Ext.grid.Panel', {
        id: 'profileGrids-alarm-panel',
        frame: false,
        store: alarmIdentifierGridStore,
        stateful: true,
        stateId: 'profileGrids-alarm-state',
        sealedColumns: true,
        enableColumnMove: false,
        enableColumnResize: true,
        columns: [
            {
                header: 'Event ID',
                width: 90,
                sortable: true,
                dataIndex: 'eventId',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Variables',
                width: 90,
                sortable: true,
                dataIndex: 'variables',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Show Alarm',
                width: 90,
                sortable: true,
                dataIndex: 'showAlarm',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Database Table',
                width: 90,
                sortable: true,
                dataIndex: 'databaseTable',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Database Access',
                width: 90,
                sortable: true,
                dataIndex: 'databaseAccess',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Table Columns',
                width: 90,
                sortable: true,
                dataIndex: 'tableColumns',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Additional Text',
                width: 90,
                sortable: true,
                dataIndex: 'additionalText',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Probable Cause',
                flex: 1,
                sortable: false,
                dataIndex: 'probableCause',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Perceived Severity',
                flex: 1,
                sortable: false,
                dataIndex: 'perceivedSeverity',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Alarm Type',
                flex: 1,
                sortable: false,
                dataIndex: 'alarmType',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'User Text',
                flex: 1,
                sortable: false,
                dataIndex: 'userText',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 1',
                flex: 1,
                sortable: false,
                dataIndex: 'label1',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 2',
                flex: 1,
                sortable: false,
                dataIndex: 'label2',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 3',
                flex: 1,
                sortable: false,
                dataIndex: 'label3',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 4',
                flex: 1,
                sortable: false,
                dataIndex: 'label4',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 5',
                flex: 1,
                sortable: false,
                dataIndex: 'label5',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 6',
                flex: 1,
                sortable: false,
                dataIndex: 'label6',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 7',
                flex: 1,
                sortable: false,
                dataIndex: 'label7',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 8',
                flex: 1,
                sortable: false,
                dataIndex: 'label8',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 9',
                flex: 1,
                sortable: false,
                dataIndex: 'label9',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Label 10',
                flex: 1,
                sortable: false,
                dataIndex: 'label10',
                field: {
                    xtype: 'textfield',
                    allowBlank: false
                }
            },
            {
                header: 'Date Created',
                width: 85,
                sortable: true,
                renderer: Ext.util.Format.dateRenderer('m/d/Y'),
                dataIndex: 'dateCreated',
                field: {
                    xtype: 'datefield',
                    allowBlank: false
                }
            }
        ],
        height: 350,
        width: '100%',
        title: 'Alarm Identifier',
        viewConfig: {
            stripeRows: true
        },
//        plugins:[alarmIdentifierCellEditing],
        tbar: [
            {
                text: 'Add Row',
                handler: function () {
                    // Create a record instance through the ModelManager
//                var t = Ext.ModelManager.create({
//                    eventId: 'NewRow',
//                    globalClass: '*',
//                    domains:    '',
//                    nodeName: '',
//                    subclass: '',
//                    originalAlarmRemain: 'No',
//                    profileName: selectedProfile,
//                    managedObjectDiscriminator: '',
//                    dateCreated: Ext.Date.clearTime(new Date())
//                }, 'AlarmIdentifierModel');
//                var rowCount3 = alarmIdentifierGridStore.getCount();
//                alarmIdentifierGridStore.insert(rowCount3, t);
//                alarmIdentifierCellEditing.startEditByPosition({row: rowCount3, column: 0});
                    alarmIdentifierWindow.show();
                }
            }
        ],
        listeners: {
            itemdblclick: function (view, rec, node, index, e) {
                alarmIdentifierWindow.show();
                var form = Ext.getCmp('alarm-form').getForm();
                form.findField('txtEventId').setValue(rec.get('eventId'));
                form.findField('txtVariables').setValue(rec.get('variables'));
                form.findField('txtShowAlarm').setValue(rec.get('showAlarm'));
                form.findField('txtDatabaseTable').setValue(rec.get('databaseTable'));
                form.findField('txtDatabaseAccess').setValue(rec.get('databaseAccess'));
                form.findField('txtTableColumns').setValue(rec.get('tableColumns'));
                form.findField('txtAdditionalText').setValue(rec.get('additionalText'));
                form.findField('txtProbableCause').setValue(rec.get('probableCause'));
                form.findField('txtPerceivedSeverity').setValue(rec.get('perceivedSeverity'));
                form.findField('txtAlarmType').setValue(rec.get('alarmType'));
                form.findField('txtUserText').setValue(rec.get('userText'));
                form.findField('txtLabel1').setValue(rec.get('label1'));
                form.findField('txtLabel2').setValue(rec.get('label2'));
                form.findField('txtLabel3').setValue(rec.get('label3'));
                form.findField('txtLabel4').setValue(rec.get('label4'));
                form.findField('txtLabel5').setValue(rec.get('label5'));
                form.findField('txtLabel6').setValue(rec.get('label6'));
                form.findField('txtLabel7').setValue(rec.get('label7'));
                form.findField('txtLabel8').setValue(rec.get('label8'));
                form.findField('txtLabel9').setValue(rec.get('label9'));
                form.findField('txtLabel10').setValue(rec.get('label10'));
                form.findField('rowId').setValue(index);
                console.log('index: ' + index);


            }
        }
    });


    var gridContainer = Ext.create('Ext.panel.Panel', {
        layout: 'auto',
        frame: false,
        id: 'profileGrids-panel',
        width: '100%',
//        items:[selectionControlGrid,paramExtractGrid,alarmIdentifierGrid],
        items: [paramExtractGrid, alarmIdentifierGrid],
        title: 'Profile Name: ',
        scroll: true,
        listeners: {
            activate: function (gridContainer, eOpts) {
                console.log('selectedProfile is : ' + selectedProfile);
                this.setTitle('Profile Name: ' + selectedProfile);
                console.log('selectedVersion is : ' + selectedVersion);

//                selectionControlGridStore.load({
//                    params:{
//                        profileId: selectedProfile,
//                        albVersion: selectedVersion}
//                });


                paramExtractGridStore.load({
                    params: {
                        profileId: selectedProfile,
                        albVersion: selectedVersion
                    }
                });

                alarmIdentifierGridStore.load({
                    params: {
                        profileId: selectedProfile,
                        albVersion: selectedVersion
                    }
                });


            }
        },
        tbar: [
            {
                text: 'Save',
                handler: function () {
                    console.log('saving!');
                    {
//                    var selectionControlRecords = selectionControlGridStore.getRange();
                        var parameterExtractRecords = paramExtractGridStore.getRange();
                        var alarmIdentifierRecords = alarmIdentifierGridStore.getRange();

                        //only save when all grids have data
//                    if (selectionControlRecords.length > 0 && parameterExtractRecords.length > 0 && alarmIdentifierRecords.length > 0) {

                        if (parameterExtractRecords.length > 0 && alarmIdentifierRecords.length > 0) {
//                        var selectionControlDataArray = new Array();
                            var parameterExtractDataArray = new Array();
                            var alarmIdentifierDataArray = new Array();

                            var finalPostValue;

//                        for (var i in selectionControlRecords) {
//                            selectionControlDataArray.push(selectionControlRecords[i].data);
//                        }

                            for (var i in parameterExtractRecords) {
                                parameterExtractDataArray.push(parameterExtractRecords[i].data);
                            }

                            for (var i in alarmIdentifierRecords) {
                                alarmIdentifierDataArray.push(alarmIdentifierRecords[i].data);
                            }

//                        var selectionControlPostValue = JSON.stringify(selectionControlDataArray);
//                        selectionControlPostValue = "{\"selctrl\":" + selectionControlPostValue + "}";
                            var parameterExtractPostValue = JSON.stringify(parameterExtractDataArray);
                            parameterExtractPostValue = "{\"paramextract\":" + parameterExtractPostValue + "}";
                            var alarmIdentifierPostValue = JSON.stringify(alarmIdentifierDataArray);
                            alarmIdentifierPostValue = "{\"alarmident\":" + alarmIdentifierPostValue + "}";


//                        finalPostValue = "{\"postvalue\":["+selectionControlPostValue + ',' + parameterExtractPostValue + ','  + alarmIdentifierPostValue+"]}";
                            finalPostValue = "{\"postvalue\":[" + parameterExtractPostValue + ',' + alarmIdentifierPostValue + "]}";
                            console.log(finalPostValue);

                            Ext.getBody().mask('Saving All Profile Details...');
                            Ext.Ajax.request(
                                {
                                    url: 'insertFullProfile.htm',
                                    method: 'POST',
                                    params: {dataArray: finalPostValue, profileId: selectedProfile, albVersion: selectedVersion},
                                    success: function (response) {
                                        Ext.Msg.alert("Success", "All Profile Details saved successfully.");
//                                    userStore.reload();
                                    },
                                    failure: function (response) {
                                        Ext.Msg.alert("Fail", "Fail to save Profile Details.");
                                    },
                                    callback: function () {
                                        Ext.getBody().unmask();
//                                    userStore.reload();
                                    }
                                }
                            );
                        } else {
                            Ext.Msg.alert("No Changes", "Nothing to save.")
                        }


                    }
                }
            }
        ]

    });

    gridContainer.on('beforedeactivate', function () {
//        Ext.MessageBox.confirm('Close', 'You may have unsaved changes. Continue?',
//            function(btn) {
//                if(btn=='yes') {
//                    gridContainer.suspendEvents();
//                    gridContainer.hide();  // This cannot be vetoed because no events will be fired.
//                    gridContainer.resumeEvents();
//                }
//            });
//        return false; //always return false to veto the hide.
    });

//    gridContainer.add(getAlarmIdentifier());
//    gridContainer.add(getParameterExtraction());
//    gridContainer.add(getSelectionControl());


    return gridContainer;


}